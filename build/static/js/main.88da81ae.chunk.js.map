{"version":3,"sources":["Graph.jsx","App.jsx","serviceWorker.js","index.js"],"names":["style","height","GraphView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","graphRef","React","createRef","initializeGraph","nodes","DataSet","edges","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","data","Symbol","iterator","next","done","node","value","group","community","toString","degree","title","concat","name","add","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","edge","weight","current","network","Network","smooth","scaling","customScalingFunction","min","max","total","scale","Math","layout","improvedLayout","randomSeed","label","enabled","shape","physics","barnesHut","springLength","centralGravity","gravitationalConstant","stabilization","minVelocity","interaction","hover","tooltipDelay","react_default","a","createElement","id","ref","Component","App","border","width","margin","className","Graph_GraphView","data_pruned","data_original","data_mod","data_group","data_pin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88da81ae.chunk.js","sourcesContent":["import 'vis/dist/vis-network.min.css';\nimport React, { Component } from 'react';\nimport { DataSet, Network } from 'vis';\n\nconst style = {\n  height: '800px',\n};\n\nexport default class GraphView extends Component {\n  constructor(props) {\n    super(props);\n    this.graphRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.initializeGraph();\n  }\n\n  initializeGraph() {\n    const nodes = new DataSet();\n    const edges = new DataSet();\n    for (const node of this.props.data.nodes) {\n      // node.label = node.name;\n      node.group = node.community.toString();\n      node.value = node.degree;\n      node.title = `\n      <div>\n        <p>${node.name}</p>\n        <p>community: ${node.group}</p>\n        <p>連接節點數: ${node.degree}</p>\n      </div>\n      `;\n      nodes.add(node);\n    }\n    for (const edge of this.props.data.edges) {\n      edge.value = edge.weight;\n      edge.title = `\n      <div>\n        <p>weight: ${edge.weight}</p>\n      </div>\n      `;\n      edges.add(edge);\n    }\n    if (this.graphRef.current) {\n      this.network = new Network(this.graphRef.current, {\n        edges,\n        nodes,\n      }, {\n          edges: {\n            smooth: false,\n            scaling: {\n              customScalingFunction: function (min,max,total,value) {\n                if (max === min) {\n                  return 0.03;\n                }\n                else {\n                  var scale = 1 / (max - min);\n                  return Math.max(0,(value - min)*scale);\n                }\n              },\n              max: 80,\n              min: 1\n            },\n          },\n          layout: {\n            improvedLayout: false,\n            randomSeed: 5\n          },\n          nodes: {\n            title: 'a',\n            scaling: {\n              customScalingFunction: function (min, max, total, value){\n                if (max === min) {\n                  return 0.5;\n                }\n                else {\n                  var scale = 1 / (max - min);\n                  return Math.max(0, (value - min) * scale);\n                }\n              },\n              label: {\n                enabled: false,\n              },\n              max: 160,\n              min: 60,\n            },\n            shape: 'dot',\n          },\n          physics: {\n            barnesHut: {\n              springLength: 500,\n              centralGravity: 0.065,\n              gravitationalConstant: -12000,\n              // avoidOverlap: 0.9,\n            },\n            stabilization: true,\n            minVelocity: 2\n          },\n          interaction: {\n            hover: true,\n            tooltipDelay: 100\n          }\n        });\n    }\n  }\n  render() {\n    return (\n      <div id='pn-graph' style={style} ref={this.graphRef} />\n    );\n  }\n}\n","import React from 'react';\nimport data from './default';\nimport data_group from './default_group';\nimport data_pin from './default_pin';\nimport data_original from './default_original';\nimport data_mod from './default_mod';\nimport data_pruned from './default_pruned';\nimport Graph from './Graph';\nimport './App.css';\n\nfunction App() {\n  const style = {\n    border:'1px solid lightgray', \n    width:'70%',\n    margin:'0 auto'\n  }\n  return (\n    <div className=\"App\">\n      <h2>商品↓</h2>\n      <div style={style}>\n        <h4>degree+price: 未刪減</h4>\n        <Graph data={data} />\n        <hr/>\n        <h4>degree+price: 刪除代收</h4>\n        <Graph data={data_pruned} />\n        <hr/>\n        <h4>原始degree</h4>\n        <Graph data={data_original} />\n        <hr/>\n        <h4>調整後degree</h4>\n        <Graph data={data_mod} />\n      </div>\n      <h2>群號↓</h2>\n      <div style={style}>\n        <Graph data={data_group} />\n      </div>\n      <h2>品號↓</h2>\n      <div style={style}>\n        <Graph data={data_pin} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}